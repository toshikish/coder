
syntax = "proto3";
option go_package = "github.com/coder/coder/v2/inteld/proto";

package inteld;

message Empty {}

message Executable {
	string hash = 1;
	string basename = 2;
	string path = 3;
	// Version is a per-tool extracted version string.
	// e.g. go1.26.4
	string version = 4;
}

// Invocation is a message that represents a single invocation of an executable.
message Invocation {
	Executable executable = 1;
	repeated string arguments = 2;
	int64 started_at = 3;
	int64 finished_at = 4;
	int32 exit_code = 5;
	string working_directory = 6;
	string git_remote_url = 7;
}

message ReportPathRequest {
	repeated Executable executables = 1;
}

message ReportInvocationRequest {
	repeated Invocation invocations = 1;
}

message RegisterRequest {
	string machine_id = 1;
	string hostname = 2;
	// GOOS
	string operating_system = 3;
	string operating_system_version = 4;
	uint32 cpu_cores = 5;
	uint64 memory_total = 6;
	// GOARCH
	string architecture = 7;
	string git_config_email = 8;
	string git_config_name = 9;
}

// SystemResponse is a message that the client streams to
// the daemon. It notifies of new tracking requests.
message SystemResponse {
	oneof message {
		TrackExecutables track_executables = 1;
	}
}

// TrackExecutables is a message that tells the daemon to track
// the executables with the given names.
message TrackExecutables {
	repeated string binary_name = 1;
}

service IntelDaemon {
	// Register must be sent before any other message.
	// If the system is not registered, all other messages will
	// fail with errors.
	rpc Register(RegisterRequest) returns (stream SystemResponse);

	rpc RecordInvocation(ReportInvocationRequest) returns (Empty);
	rpc ReportPath(ReportPathRequest) returns (Empty);
}
